/// Meta data about known SPIR-V operations
#[derive(Debug, Copy, Clone, PartialEq)]
pub enum SpvOp {
    Invalid = -1,
    Nop = 0,
    Undef = 1,
    SourceContinued = 2,
    Source = 3,
    SourceExtension = 4,
    Name = 5,
    MemberName = 6,
    String = 7,
    Line = 8,
    Extension = 10,
    ExtInstImport = 11,
    ExtInst = 12,
    VectorShuffleCompact = 13, // not in SPIR-V, added for SMOL-V!
    MemoryModel = 14,
    EntryPoint = 15,
    ExecutionMode = 16,
    Capability = 17,
    TypeVoid = 19,
    TypeBool = 20,
    TypeInt = 21,
    TypeFloat = 22,
    TypeVector = 23,
    TypeMatrix = 24,
    TypeImage = 25,
    TypeSampler = 26,
    TypeSampledImage = 27,
    TypeArray = 28,
    TypeRuntimeArray = 29,
    TypeStruct = 30,
    TypeOpaque = 31,
    TypePointer = 32,
    TypeFunction = 33,
    TypeEvent = 34,
    TypeDeviceEvent = 35,
    TypeReserveId = 36,
    TypeQueue = 37,
    TypePipe = 38,
    TypeForwardPointer = 39,
    ConstantTrue = 41,
    ConstantFalse = 42,
    Constant = 43,
    ConstantComposite = 44,
    ConstantSampler = 45,
    ConstantNull = 46,
    SpecConstantTrue = 48,
    SpecConstantFalse = 49,
    SpecConstant = 50,
    SpecConstantComposite = 51,
    SpecConstantOp = 52,
    Function = 54,
    FunctionParameter = 55,
    FunctionEnd = 56,
    FunctionCall = 57,
    Variable = 59,
    ImageTexelPointer = 60,
    Load = 61,
    Store = 62,
    CopyMemory = 63,
    CopyMemorySized = 64,
    AccessChain = 65,
    InBoundsAccessChain = 66,
    PtrAccessChain = 67,
    ArrayLength = 68,
    GenericPtrMemSemantics = 69,
    InBoundsPtrAccessChain = 70,
    Decorate = 71,
    MemberDecorate = 72,
    DecorationGroup = 73,
    GroupDecorate = 74,
    GroupMemberDecorate = 75,
    VectorExtractDynamic = 77,
    VectorInsertDynamic = 78,
    VectorShuffle = 79,
    CompositeConstruct = 80,
    CompositeExtract = 81,
    CompositeInsert = 82,
    CopyObject = 83,
    Transpose = 84,
    SampledImage = 86,
    ImageSampleImplicitLod = 87,
    ImageSampleExplicitLod = 88,
    ImageSampleDrefImplicitLod = 89,
    ImageSampleDrefExplicitLod = 90,
    ImageSampleProjImplicitLod = 91,
    ImageSampleProjExplicitLod = 92,
    ImageSampleProjDrefImplicitLod = 93,
    ImageSampleProjDrefExplicitLod = 94,
    ImageFetch = 95,
    ImageGather = 96,
    ImageDrefGather = 97,
    ImageRead = 98,
    ImageWrite = 99,
    Image = 100,
    ImageQueryFormat = 101,
    ImageQueryOrder = 102,
    ImageQuerySizeLod = 103,
    ImageQuerySize = 104,
    ImageQueryLod = 105,
    ImageQueryLevels = 106,
    ImageQuerySamples = 107,
    ConvertFToU = 109,
    ConvertFToS = 110,
    ConvertSToF = 111,
    ConvertUToF = 112,
    UConvert = 113,
    SConvert = 114,
    FConvert = 115,
    QuantizeToF16 = 116,
    ConvertPtrToU = 117,
    SatConvertSToU = 118,
    SatConvertUToS = 119,
    ConvertUToPtr = 120,
    PtrCastToGeneric = 121,
    GenericCastToPtr = 122,
    GenericCastToPtrExplicit = 123,
    Bitcast = 124,
    SNegate = 126,
    FNegate = 127,
    IAdd = 128,
    FAdd = 129,
    ISub = 130,
    FSub = 131,
    IMul = 132,
    FMul = 133,
    UDiv = 134,
    SDiv = 135,
    FDiv = 136,
    UMod = 137,
    SRem = 138,
    SMod = 139,
    FRem = 140,
    FMod = 141,
    VectorTimesScalar = 142,
    MatrixTimesScalar = 143,
    VectorTimesMatrix = 144,
    MatrixTimesVector = 145,
    MatrixTimesMatrix = 146,
    OuterProduct = 147,
    Dot = 148,
    IAddCarry = 149,
    ISubBorrow = 150,
    UMulExtended = 151,
    SMulExtended = 152,
    Any = 154,
    All = 155,
    IsNan = 156,
    IsInf = 157,
    IsFinite = 158,
    IsNormal = 159,
    SignBitSet = 160,
    LessOrGreater = 161,
    Ordered = 162,
    Unordered = 163,
    LogicalEqual = 164,
    LogicalNotEqual = 165,
    LogicalOr = 166,
    LogicalAnd = 167,
    LogicalNot = 168,
    Select = 169,
    IEqual = 170,
    INotEqual = 171,
    UGreaterThan = 172,
    SGreaterThan = 173,
    UGreaterThanEqual = 174,
    SGreaterThanEqual = 175,
    ULessThan = 176,
    SLessThan = 177,
    ULessThanEqual = 178,
    SLessThanEqual = 179,
    FOrdEqual = 180,
    FUnordEqual = 181,
    FOrdNotEqual = 182,
    FUnordNotEqual = 183,
    FOrdLessThan = 184,
    FUnordLessThan = 185,
    FOrdGreaterThan = 186,
    FUnordGreaterThan = 187,
    FOrdLessThanEqual = 188,
    FUnordLessThanEqual = 189,
    FOrdGreaterThanEqual = 190,
    FUnordGreaterThanEqual = 191,
    ShiftRightLogical = 194,
    ShiftRightArithmetic = 195,
    ShiftLeftLogical = 196,
    BitwiseOr = 197,
    BitwiseXor = 198,
    BitwiseAnd = 199,
    Not = 200,
    BitFieldInsert = 201,
    BitFieldSExtract = 202,
    BitFieldUExtract = 203,
    BitReverse = 204,
    BitCount = 205,
    DPdx = 207,
    DPdy = 208,
    Fwidth = 209,
    DPdxFine = 210,
    DPdyFine = 211,
    FwidthFine = 212,
    DPdxCoarse = 213,
    DPdyCoarse = 214,
    FwidthCoarse = 215,
    EmitVertex = 218,
    EndPrimitive = 219,
    EmitStreamVertex = 220,
    EndStreamPrimitive = 221,
    ControlBarrier = 224,
    MemoryBarrier = 225,
    AtomicLoad = 227,
    AtomicStore = 228,
    AtomicExchange = 229,
    AtomicCompareExchange = 230,
    AtomicCompareExchangeWeak = 231,
    AtomicIIncrement = 232,
    AtomicIDecrement = 233,
    AtomicIAdd = 234,
    AtomicISub = 235,
    AtomicSMin = 236,
    AtomicUMin = 237,
    AtomicSMax = 238,
    AtomicUMax = 239,
    AtomicAnd = 240,
    AtomicOr = 241,
    AtomicXor = 242,
    Phi = 245,
    LoopMerge = 246,
    SelectionMerge = 247,
    Label = 248,
    Branch = 249,
    BranchConditional = 250,
    Switch = 251,
    Kill = 252,
    Return = 253,
    ReturnValue = 254,
    Unreachable = 255,
    LifetimeStart = 256,
    LifetimeStop = 257,
    GroupAsyncCopy = 259,
    GroupWaitEvents = 260,
    GroupAll = 261,
    GroupAny = 262,
    GroupBroadcast = 263,
    GroupIAdd = 264,
    GroupFAdd = 265,
    GroupFMin = 266,
    GroupUMin = 267,
    GroupSMin = 268,
    GroupFMax = 269,
    GroupUMax = 270,
    GroupSMax = 271,
    ReadPipe = 274,
    WritePipe = 275,
    ReservedReadPipe = 276,
    ReservedWritePipe = 277,
    ReserveReadPipePackets = 278,
    ReserveWritePipePackets = 279,
    CommitReadPipe = 280,
    CommitWritePipe = 281,
    IsValidReserveId = 282,
    GetNumPipePackets = 283,
    GetMaxPipePackets = 284,
    GroupReserveReadPipePackets = 285,
    GroupReserveWritePipePackets = 286,
    GroupCommitReadPipe = 287,
    GroupCommitWritePipe = 288,
    EnqueueMarker = 291,
    EnqueueKernel = 292,
    GetKernelNDrangeSubGroupCount = 293,
    GetKernelNDrangeMaxSubGroupSize = 294,
    GetKernelWorkGroupSize = 295,
    GetKernelPreferredWorkGroupSizeMultiple = 296,
    RetainEvent = 297,
    ReleaseEvent = 298,
    CreateUserEvent = 299,
    IsValidEvent = 300,
    SetUserEventStatus = 301,
    CaptureEventProfilingInfo = 302,
    GetDefaultQueue = 303,
    BuildNDRange = 304,
    ImageSparseSampleImplicitLod = 305,
    ImageSparseSampleExplicitLod = 306,
    ImageSparseSampleDrefImplicitLod = 307,
    ImageSparseSampleDrefExplicitLod = 308,
    ImageSparseSampleProjImplicitLod = 309,
    ImageSparseSampleProjExplicitLod = 310,
    ImageSparseSampleProjDrefImplicitLod = 311,
    ImageSparseSampleProjDrefExplicitLod = 312,
    ImageSparseFetch = 313,
    ImageSparseGather = 314,
    ImageSparseDrefGather = 315,
    ImageSparseTexelsResident = 316,
    NoLine = 317,
    AtomicFlagTestAndSet = 318,
    AtomicFlagClear = 319,
    ImageSparseRead = 320,
    SizeOf = 321,
    TypePipeStorage = 322,
    ConstantPipeStorage = 323,
    CreatePipeFromPipeStorage = 324,
    GetKernelLocalSizeForSubgroupCount = 325,
    GetKernelMaxNumSubgroups = 326,
    TypeNamedBarrier = 327,
    NamedBarrierInitialize = 328,
    MemoryNamedBarrier = 329,
    ModuleProcessed = 330,
}

const KNOWN_OPTS_COUNT: usize = SpvOp::ModuleProcessed as usize + 1;

impl SpvOp {
    pub fn debug_info(&self) -> bool {
        self == &SpvOp::SourceContinued
            || self == &SpvOp::Source
            || self == &SpvOp::SourceExtension
            || self == &SpvOp::Name
            || self == &SpvOp::MemberName
            || self == &SpvOp::String
            || self == &SpvOp::Line
            || self == &SpvOp::NoLine
            || self == &SpvOp::ModuleProcessed
    }
}

#[derive(Default, Debug, Copy, Clone)]
pub struct OpData {
    /// Does it have result ID?
    pub has_result: u8,

    /// Does it have type ID?
    pub has_type: u8,

    /// How many words after (optional) type+result to write out as deltas from result?
    pub delta_from_result: u8,

    /// Should the rest of words be written in varint encoding?
    pub varrest: u8,
}

impl OpData {
    pub fn new(has_result: u8, has_type: u8, delta_from_result: u8, varrest: u8) -> Self {
        OpData {
            has_result,
            has_type,
            delta_from_result,
            varrest,
        }
    }
}

lazy_static! {
    static ref SPV_OP_DATA: Vec<(SpvOp, OpData, &'static str)> = {
        vec![
            (SpvOp::Nop, OpData::new(0, 0, 0, 0), "Nop"),
            (SpvOp::Undef, OpData::new(1, 1, 0, 0), "Undef"),
            (
                SpvOp::SourceContinued,
                OpData::new(0, 0, 0, 0),
                "SourceContinued",
            ),
            (SpvOp::Source, OpData::new(0, 0, 0, 1), "Source"),
            (
                SpvOp::SourceExtension,
                OpData::new(0, 0, 0, 0),
                "SourceExtension",
            ),
            (SpvOp::Name, OpData::new(0, 0, 0, 0), "Name"),
            (SpvOp::MemberName, OpData::new(0, 0, 0, 0), "MemberName"),
            (SpvOp::String, OpData::new(0, 0, 0, 0), "String"),
            (SpvOp::Line, OpData::new(0, 0, 0, 1), "Line"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#9"),
            (SpvOp::Extension, OpData::new(0, 0, 0, 0), "Extension"),
            (
                SpvOp::ExtInstImport,
                OpData::new(1, 0, 0, 0),
                "ExtInstImport",
            ),
            (SpvOp::ExtInst, OpData::new(1, 1, 0, 1), "ExtInst"),
            (
                SpvOp::VectorShuffleCompact,
                OpData::new(1, 1, 2, 1),
                "VectorShuffleCompact",
            ),
            (SpvOp::MemoryModel, OpData::new(0, 0, 0, 1), "MemoryModel"),
            (SpvOp::EntryPoint, OpData::new(0, 0, 0, 1), "EntryPoint"),
            (
                SpvOp::ExecutionMode,
                OpData::new(0, 0, 0, 1),
                "ExecutionMode",
            ),
            (SpvOp::Capability, OpData::new(0, 0, 0, 1), "Capability"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#18"),
            (SpvOp::TypeVoid, OpData::new(1, 0, 0, 1), "TypeVoid"),
            (SpvOp::TypeBool, OpData::new(1, 0, 0, 1), "TypeBool"),
            (SpvOp::TypeInt, OpData::new(1, 0, 0, 1), "TypeInt"),
            (SpvOp::TypeFloat, OpData::new(1, 0, 0, 1), "TypeFloat"),
            (SpvOp::TypeVector, OpData::new(1, 0, 0, 1), "TypeVector"),
            (SpvOp::TypeMatrix, OpData::new(1, 0, 0, 1), "TypeMatrix"),
            (SpvOp::TypeImage, OpData::new(1, 0, 0, 1), "TypeImage"),
            (SpvOp::TypeSampler, OpData::new(1, 0, 0, 1), "TypeSampler"),
            (
                SpvOp::TypeSampledImage,
                OpData::new(1, 0, 0, 1),
                "TypeSampledImage",
            ),
            (SpvOp::TypeArray, OpData::new(1, 0, 0, 1), "TypeArray"),
            (
                SpvOp::TypeRuntimeArray,
                OpData::new(1, 0, 0, 1),
                "TypeRuntimeArray",
            ),
            (SpvOp::TypeStruct, OpData::new(1, 0, 0, 1), "TypeStruct"),
            (SpvOp::TypeOpaque, OpData::new(1, 0, 0, 1), "TypeOpaque"),
            (SpvOp::TypePointer, OpData::new(1, 0, 0, 1), "TypePointer"),
            (SpvOp::TypeFunction, OpData::new(1, 0, 0, 1), "TypeFunction"),
            (SpvOp::TypeEvent, OpData::new(1, 0, 0, 1), "TypeEvent"),
            (
                SpvOp::TypeDeviceEvent,
                OpData::new(1, 0, 0, 1),
                "TypeDeviceEvent",
            ),
            (
                SpvOp::TypeReserveId,
                OpData::new(1, 0, 0, 1),
                "TypeReserveId",
            ),
            (SpvOp::TypeQueue, OpData::new(1, 0, 0, 1), "TypeQueue"),
            (SpvOp::TypePipe, OpData::new(1, 0, 0, 1), "TypePipe"),
            (
                SpvOp::TypeForwardPointer,
                OpData::new(0, 0, 0, 1),
                "TypeForwardPointer",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#40"),
            (SpvOp::ConstantTrue, OpData::new(1, 1, 0, 0), "ConstantTrue"),
            (
                SpvOp::ConstantFalse,
                OpData::new(1, 1, 0, 0),
                "ConstantFalse",
            ),
            (SpvOp::Constant, OpData::new(1, 1, 0, 0), "Constant"),
            (
                SpvOp::ConstantComposite,
                OpData::new(1, 1, 9, 0),
                "ConstantComposite",
            ),
            (
                SpvOp::ConstantSampler,
                OpData::new(1, 1, 0, 1),
                "ConstantSampler",
            ),
            (SpvOp::ConstantNull, OpData::new(1, 1, 0, 0), "ConstantNull"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#47"),
            (
                SpvOp::SpecConstantTrue,
                OpData::new(1, 1, 0, 0),
                "SpecConstantTrue",
            ),
            (
                SpvOp::SpecConstantFalse,
                OpData::new(1, 1, 0, 0),
                "SpecConstantFalse",
            ),
            (SpvOp::SpecConstant, OpData::new(1, 1, 0, 0), "SpecConstant"),
            (
                SpvOp::SpecConstantComposite,
                OpData::new(1, 1, 9, 0),
                "SpecConstantComposite",
            ),
            (
                SpvOp::SpecConstantOp,
                OpData::new(1, 1, 0, 0),
                "SpecConstantOp",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#53"),
            (SpvOp::Function, OpData::new(1, 1, 0, 1), "Function"),
            (
                SpvOp::FunctionParameter,
                OpData::new(1, 1, 0, 0),
                "FunctionParameter",
            ),
            (SpvOp::FunctionEnd, OpData::new(0, 0, 0, 0), "FunctionEnd"),
            (SpvOp::FunctionCall, OpData::new(1, 1, 9, 0), "FunctionCall"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#58"),
            (SpvOp::Variable, OpData::new(1, 1, 0, 1), "Variable"),
            (
                SpvOp::ImageTexelPointer,
                OpData::new(1, 1, 0, 0),
                "ImageTexelPointer",
            ),
            (SpvOp::Load, OpData::new(1, 1, 1, 1), "Load"),
            (SpvOp::Store, OpData::new(0, 0, 2, 1), "Store"),
            (SpvOp::CopyMemory, OpData::new(0, 0, 0, 0), "CopyMemory"),
            (
                SpvOp::CopyMemorySized,
                OpData::new(0, 0, 0, 0),
                "CopyMemorySized",
            ),
            (SpvOp::AccessChain, OpData::new(1, 1, 0, 1), "AccessChain"),
            (
                SpvOp::InBoundsAccessChain,
                OpData::new(1, 1, 0, 0),
                "InBoundsAccessChain",
            ),
            (
                SpvOp::PtrAccessChain,
                OpData::new(1, 1, 0, 0),
                "PtrAccessChain",
            ),
            (SpvOp::ArrayLength, OpData::new(1, 1, 0, 0), "ArrayLength"),
            (
                SpvOp::GenericPtrMemSemantics,
                OpData::new(1, 1, 0, 0),
                "GenericPtrMemSemantics",
            ),
            (
                SpvOp::InBoundsPtrAccessChain,
                OpData::new(1, 1, 0, 0),
                "InBoundsPtrAccessChain",
            ),
            (SpvOp::Decorate, OpData::new(0, 0, 0, 1), "Decorate"),
            (
                SpvOp::MemberDecorate,
                OpData::new(0, 0, 0, 1),
                "MemberDecorate",
            ),
            (
                SpvOp::DecorationGroup,
                OpData::new(1, 0, 0, 0),
                "DecorationGroup",
            ),
            (
                SpvOp::GroupDecorate,
                OpData::new(0, 0, 0, 0),
                "GroupDecorate",
            ),
            (
                SpvOp::GroupMemberDecorate,
                OpData::new(0, 0, 0, 0),
                "GroupMemberDecorate",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#76"),
            (
                SpvOp::VectorExtractDynamic,
                OpData::new(1, 1, 1, 1),
                "VectorExtractDynamic",
            ),
            (
                SpvOp::VectorInsertDynamic,
                OpData::new(1, 1, 2, 1),
                "VectorInsertDynamic",
            ),
            (
                SpvOp::VectorShuffle,
                OpData::new(1, 1, 2, 1),
                "VectorShuffle",
            ),
            (
                SpvOp::CompositeConstruct,
                OpData::new(1, 1, 9, 0),
                "CompositeConstruct",
            ),
            (
                SpvOp::CompositeExtract,
                OpData::new(1, 1, 1, 1),
                "CompositeExtract",
            ),
            (
                SpvOp::CompositeInsert,
                OpData::new(1, 1, 2, 1),
                "CompositeInsert",
            ),
            (SpvOp::CopyObject, OpData::new(1, 1, 1, 0), "CopyObject"),
            (SpvOp::Transpose, OpData::new(1, 1, 0, 0), "Transpose"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#85"),
            (SpvOp::SampledImage, OpData::new(1, 1, 0, 0), "SampledImage"),
            (
                SpvOp::ImageSampleImplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSampleImplicitLod",
            ),
            (
                SpvOp::ImageSampleExplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSampleExplicitLod",
            ),
            (
                SpvOp::ImageSampleDrefImplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSampleDrefImplicitLod",
            ),
            (
                SpvOp::ImageSampleDrefExplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSampleDrefExplicitLod",
            ),
            (
                SpvOp::ImageSampleProjImplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSampleProjImplicitLod",
            ),
            (
                SpvOp::ImageSampleProjExplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSampleProjExplicitLod",
            ),
            (
                SpvOp::ImageSampleProjDrefImplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSampleProjDrefImplicitLod",
            ),
            (
                SpvOp::ImageSampleProjDrefExplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSampleProjDrefExplicitLod",
            ),
            (SpvOp::ImageFetch, OpData::new(1, 1, 2, 1), "ImageFetch"),
            (SpvOp::ImageGather, OpData::new(1, 1, 3, 1), "ImageGather"),
            (
                SpvOp::ImageDrefGather,
                OpData::new(1, 1, 3, 1),
                "ImageDrefGather",
            ),
            (SpvOp::ImageRead, OpData::new(1, 1, 2, 1), "ImageRead"),
            (SpvOp::ImageWrite, OpData::new(0, 0, 3, 1), "ImageWrite"),
            (SpvOp::Image, OpData::new(1, 1, 1, 0), "Image"),
            (
                SpvOp::ImageQueryFormat,
                OpData::new(1, 1, 1, 0),
                "ImageQueryFormat",
            ),
            (
                SpvOp::ImageQueryOrder,
                OpData::new(1, 1, 1, 0),
                "ImageQueryOrder",
            ),
            (
                SpvOp::ImageQuerySizeLod,
                OpData::new(1, 1, 2, 0),
                "ImageQuerySizeLod",
            ),
            (
                SpvOp::ImageQuerySize,
                OpData::new(1, 1, 1, 0),
                "ImageQuerySize",
            ),
            (
                SpvOp::ImageQueryLod,
                OpData::new(1, 1, 2, 0),
                "ImageQueryLod",
            ),
            (
                SpvOp::ImageQueryLevels,
                OpData::new(1, 1, 1, 0),
                "ImageQueryLevels",
            ),
            (
                SpvOp::ImageQuerySamples,
                OpData::new(1, 1, 1, 0),
                "ImageQuerySamples",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#108"),
            (SpvOp::ConvertFToU, OpData::new(1, 1, 1, 0), "ConvertFToU"),
            (SpvOp::ConvertFToS, OpData::new(1, 1, 1, 0), "ConvertFToS"),
            (SpvOp::ConvertSToF, OpData::new(1, 1, 1, 0), "ConvertSToF"),
            (SpvOp::ConvertUToF, OpData::new(1, 1, 1, 0), "ConvertUToF"),
            (SpvOp::UConvert, OpData::new(1, 1, 1, 0), "UConvert"),
            (SpvOp::SConvert, OpData::new(1, 1, 1, 0), "SConvert"),
            (SpvOp::FConvert, OpData::new(1, 1, 1, 0), "FConvert"),
            (
                SpvOp::QuantizeToF16,
                OpData::new(1, 1, 1, 0),
                "QuantizeToF16",
            ),
            (
                SpvOp::ConvertPtrToU,
                OpData::new(1, 1, 1, 0),
                "ConvertPtrToU",
            ),
            (
                SpvOp::SatConvertSToU,
                OpData::new(1, 1, 1, 0),
                "SatConvertSToU",
            ),
            (
                SpvOp::SatConvertUToS,
                OpData::new(1, 1, 1, 0),
                "SatConvertUToS",
            ),
            (
                SpvOp::ConvertUToPtr,
                OpData::new(1, 1, 1, 0),
                "ConvertUToPtr",
            ),
            (
                SpvOp::PtrCastToGeneric,
                OpData::new(1, 1, 1, 0),
                "PtrCastToGeneric",
            ),
            (
                SpvOp::GenericCastToPtr,
                OpData::new(1, 1, 1, 0),
                "GenericCastToPtr",
            ),
            (
                SpvOp::GenericCastToPtrExplicit,
                OpData::new(1, 1, 1, 1),
                "GenericCastToPtrExplicit",
            ),
            (SpvOp::Bitcast, OpData::new(1, 1, 1, 0), "Bitcast"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#125"),
            (SpvOp::SNegate, OpData::new(1, 1, 1, 0), "SNegate"),
            (SpvOp::FNegate, OpData::new(1, 1, 1, 0), "FNegate"),
            (SpvOp::IAdd, OpData::new(1, 1, 2, 0), "IAdd"),
            (SpvOp::FAdd, OpData::new(1, 1, 2, 0), "FAdd"),
            (SpvOp::ISub, OpData::new(1, 1, 2, 0), "ISub"),
            (SpvOp::FSub, OpData::new(1, 1, 2, 0), "FSub"),
            (SpvOp::IMul, OpData::new(1, 1, 2, 0), "IMul"),
            (SpvOp::FMul, OpData::new(1, 1, 2, 0), "FMul"),
            (SpvOp::UDiv, OpData::new(1, 1, 2, 0), "UDiv"),
            (SpvOp::SDiv, OpData::new(1, 1, 2, 0), "SDiv"),
            (SpvOp::FDiv, OpData::new(1, 1, 2, 0), "FDiv"),
            (SpvOp::UMod, OpData::new(1, 1, 2, 0), "UMod"),
            (SpvOp::SRem, OpData::new(1, 1, 2, 0), "SRem"),
            (SpvOp::SMod, OpData::new(1, 1, 2, 0), "SMod"),
            (SpvOp::FRem, OpData::new(1, 1, 2, 0), "FRem"),
            (SpvOp::FMod, OpData::new(1, 1, 2, 0), "FMod"),
            (
                SpvOp::VectorTimesScalar,
                OpData::new(1, 1, 2, 0),
                "VectorTimesScalar",
            ),
            (
                SpvOp::MatrixTimesScalar,
                OpData::new(1, 1, 2, 0),
                "MatrixTimesScalar",
            ),
            (
                SpvOp::VectorTimesMatrix,
                OpData::new(1, 1, 2, 0),
                "VectorTimesMatrix",
            ),
            (
                SpvOp::MatrixTimesVector,
                OpData::new(1, 1, 2, 0),
                "MatrixTimesVector",
            ),
            (
                SpvOp::MatrixTimesMatrix,
                OpData::new(1, 1, 2, 0),
                "MatrixTimesMatrix",
            ),
            (SpvOp::OuterProduct, OpData::new(1, 1, 2, 0), "OuterProduct"),
            (SpvOp::Dot, OpData::new(1, 1, 2, 0), "Dot"),
            (SpvOp::IAddCarry, OpData::new(1, 1, 2, 0), "IAddCarry"),
            (SpvOp::ISubBorrow, OpData::new(1, 1, 2, 0), "ISubBorrow"),
            (SpvOp::UMulExtended, OpData::new(1, 1, 2, 0), "UMulExtended"),
            (SpvOp::SMulExtended, OpData::new(1, 1, 2, 0), "SMulExtended"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#153"),
            (SpvOp::Any, OpData::new(1, 1, 1, 0), "Any"),
            (SpvOp::All, OpData::new(1, 1, 1, 0), "All"),
            (SpvOp::IsNan, OpData::new(1, 1, 1, 0), "IsNan"),
            (SpvOp::IsInf, OpData::new(1, 1, 1, 0), "IsInf"),
            (SpvOp::IsFinite, OpData::new(1, 1, 1, 0), "IsFinite"),
            (SpvOp::IsNormal, OpData::new(1, 1, 1, 0), "IsNormal"),
            (SpvOp::SignBitSet, OpData::new(1, 1, 1, 0), "SignBitSet"),
            (
                SpvOp::LessOrGreater,
                OpData::new(1, 1, 2, 0),
                "LessOrGreater",
            ),
            (SpvOp::Ordered, OpData::new(1, 1, 2, 0), "Ordered"),
            (SpvOp::Unordered, OpData::new(1, 1, 2, 0), "Unordered"),
            (SpvOp::LogicalEqual, OpData::new(1, 1, 2, 0), "LogicalEqual"),
            (
                SpvOp::LogicalNotEqual,
                OpData::new(1, 1, 2, 0),
                "LogicalNotEqual",
            ),
            (SpvOp::LogicalOr, OpData::new(1, 1, 2, 0), "LogicalOr"),
            (SpvOp::LogicalAnd, OpData::new(1, 1, 2, 0), "LogicalAnd"),
            (SpvOp::LogicalNot, OpData::new(1, 1, 1, 0), "LogicalNot"),
            (SpvOp::Select, OpData::new(1, 1, 3, 0), "Select"),
            (SpvOp::IEqual, OpData::new(1, 1, 2, 0), "IEqual"),
            (SpvOp::INotEqual, OpData::new(1, 1, 2, 0), "INotEqual"),
            (SpvOp::UGreaterThan, OpData::new(1, 1, 2, 0), "UGreaterThan"),
            (SpvOp::SGreaterThan, OpData::new(1, 1, 2, 0), "SGreaterThan"),
            (
                SpvOp::UGreaterThanEqual,
                OpData::new(1, 1, 2, 0),
                "UGreaterThanEqual",
            ),
            (
                SpvOp::SGreaterThanEqual,
                OpData::new(1, 1, 2, 0),
                "SGreaterThanEqual",
            ),
            (SpvOp::ULessThan, OpData::new(1, 1, 2, 0), "ULessThan"),
            (SpvOp::SLessThan, OpData::new(1, 1, 2, 0), "SLessThan"),
            (
                SpvOp::ULessThanEqual,
                OpData::new(1, 1, 2, 0),
                "ULessThanEqual",
            ),
            (
                SpvOp::SLessThanEqual,
                OpData::new(1, 1, 2, 0),
                "SLessThanEqual",
            ),
            (SpvOp::FOrdEqual, OpData::new(1, 1, 2, 0), "FOrdEqual"),
            (SpvOp::FUnordEqual, OpData::new(1, 1, 2, 0), "FUnordEqual"),
            (SpvOp::FOrdNotEqual, OpData::new(1, 1, 2, 0), "FOrdNotEqual"),
            (
                SpvOp::FUnordNotEqual,
                OpData::new(1, 1, 2, 0),
                "FUnordNotEqual",
            ),
            (SpvOp::FOrdLessThan, OpData::new(1, 1, 2, 0), "FOrdLessThan"),
            (
                SpvOp::FUnordLessThan,
                OpData::new(1, 1, 2, 0),
                "FUnordLessThan",
            ),
            (
                SpvOp::FOrdGreaterThan,
                OpData::new(1, 1, 2, 0),
                "FOrdGreaterThan",
            ),
            (
                SpvOp::FUnordGreaterThan,
                OpData::new(1, 1, 2, 0),
                "FUnordGreaterThan",
            ),
            (
                SpvOp::FOrdLessThanEqual,
                OpData::new(1, 1, 2, 0),
                "FOrdLessThanEqual",
            ),
            (
                SpvOp::FUnordLessThanEqual,
                OpData::new(1, 1, 2, 0),
                "FUnordLessThanEqual",
            ),
            (
                SpvOp::FOrdGreaterThanEqual,
                OpData::new(1, 1, 2, 0),
                "FOrdGreaterThanEqual",
            ),
            (
                SpvOp::FUnordGreaterThanEqual,
                OpData::new(1, 1, 2, 0),
                "FUnordGreaterThanEqual",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#192"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#193"),
            (
                SpvOp::ShiftRightLogical,
                OpData::new(1, 1, 2, 0),
                "ShiftRightLogical",
            ),
            (
                SpvOp::ShiftRightArithmetic,
                OpData::new(1, 1, 2, 0),
                "ShiftRightArithmetic",
            ),
            (
                SpvOp::ShiftLeftLogical,
                OpData::new(1, 1, 2, 0),
                "ShiftLeftLogical",
            ),
            (SpvOp::BitwiseOr, OpData::new(1, 1, 2, 0), "BitwiseOr"),
            (SpvOp::BitwiseXor, OpData::new(1, 1, 2, 0), "BitwiseXor"),
            (SpvOp::BitwiseAnd, OpData::new(1, 1, 2, 0), "BitwiseAnd"),
            (SpvOp::Not, OpData::new(1, 1, 1, 0), "Not"),
            (
                SpvOp::BitFieldInsert,
                OpData::new(1, 1, 4, 0),
                "BitFieldInsert",
            ),
            (
                SpvOp::BitFieldSExtract,
                OpData::new(1, 1, 3, 0),
                "BitFieldSExtract",
            ),
            (
                SpvOp::BitFieldUExtract,
                OpData::new(1, 1, 3, 0),
                "BitFieldUExtract",
            ),
            (SpvOp::BitReverse, OpData::new(1, 1, 1, 0), "BitReverse"),
            (SpvOp::BitCount, OpData::new(1, 1, 1, 0), "BitCount"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#206"),
            (SpvOp::DPdx, OpData::new(1, 1, 0, 0), "DPdx"),
            (SpvOp::DPdy, OpData::new(1, 1, 0, 0), "DPdy"),
            (SpvOp::Fwidth, OpData::new(1, 1, 0, 0), "Fwidth"),
            (SpvOp::DPdxFine, OpData::new(1, 1, 0, 0), "DPdxFine"),
            (SpvOp::DPdyFine, OpData::new(1, 1, 0, 0), "DPdyFine"),
            (SpvOp::FwidthFine, OpData::new(1, 1, 0, 0), "FwidthFine"),
            (SpvOp::DPdxCoarse, OpData::new(1, 1, 0, 0), "DPdxCoarse"),
            (SpvOp::DPdyCoarse, OpData::new(1, 1, 0, 0), "DPdyCoarse"),
            (SpvOp::FwidthCoarse, OpData::new(1, 1, 0, 0), "FwidthCoarse"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#216"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#217"),
            (SpvOp::EmitVertex, OpData::new(0, 0, 0, 0), "EmitVertex"),
            (SpvOp::EndPrimitive, OpData::new(0, 0, 0, 0), "EndPrimitive"),
            (
                SpvOp::EmitStreamVertex,
                OpData::new(0, 0, 0, 0),
                "EmitStreamVertex",
            ),
            (
                SpvOp::EndStreamPrimitive,
                OpData::new(0, 0, 0, 0),
                "EndStreamPrimitive",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#222"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#223"),
            (
                SpvOp::ControlBarrier,
                OpData::new(0, 0, 3, 0),
                "ControlBarrier",
            ),
            (
                SpvOp::MemoryBarrier,
                OpData::new(0, 0, 2, 0),
                "MemoryBarrier",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#226"),
            (SpvOp::AtomicLoad, OpData::new(1, 1, 0, 0), "AtomicLoad"),
            (SpvOp::AtomicStore, OpData::new(0, 0, 0, 0), "AtomicStore"),
            (
                SpvOp::AtomicExchange,
                OpData::new(1, 1, 0, 0),
                "AtomicExchange",
            ),
            (
                SpvOp::AtomicCompareExchange,
                OpData::new(1, 1, 0, 0),
                "AtomicCompareExchange",
            ),
            (
                SpvOp::AtomicCompareExchangeWeak,
                OpData::new(1, 1, 0, 0),
                "AtomicCompareExchangeWeak",
            ),
            (
                SpvOp::AtomicIIncrement,
                OpData::new(1, 1, 0, 0),
                "AtomicIIncrement",
            ),
            (
                SpvOp::AtomicIDecrement,
                OpData::new(1, 1, 0, 0),
                "AtomicIDecrement",
            ),
            (SpvOp::AtomicIAdd, OpData::new(1, 1, 0, 0), "AtomicIAdd"),
            (SpvOp::AtomicISub, OpData::new(1, 1, 0, 0), "AtomicISub"),
            (SpvOp::AtomicSMin, OpData::new(1, 1, 0, 0), "AtomicSMin"),
            (SpvOp::AtomicUMin, OpData::new(1, 1, 0, 0), "AtomicUMin"),
            (SpvOp::AtomicSMax, OpData::new(1, 1, 0, 0), "AtomicSMax"),
            (SpvOp::AtomicUMax, OpData::new(1, 1, 0, 0), "AtomicUMax"),
            (SpvOp::AtomicAnd, OpData::new(1, 1, 0, 0), "AtomicAnd"),
            (SpvOp::AtomicOr, OpData::new(1, 1, 0, 0), "AtomicOr"),
            (SpvOp::AtomicXor, OpData::new(1, 1, 0, 0), "AtomicXor"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#243"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#244"),
            (SpvOp::Phi, OpData::new(1, 1, 0, 0), "Phi"),
            (SpvOp::LoopMerge, OpData::new(0, 0, 2, 1), "LoopMerge"),
            (
                SpvOp::SelectionMerge,
                OpData::new(0, 0, 1, 1),
                "SelectionMerge",
            ),
            (SpvOp::Label, OpData::new(1, 0, 0, 0), "Label"),
            (SpvOp::Branch, OpData::new(0, 0, 1, 0), "Branch"),
            (
                SpvOp::BranchConditional,
                OpData::new(0, 0, 3, 1),
                "BranchConditional",
            ),
            (SpvOp::Switch, OpData::new(0, 0, 0, 0), "Switch"),
            (SpvOp::Kill, OpData::new(0, 0, 0, 0), "Kill"),
            (SpvOp::Return, OpData::new(0, 0, 0, 0), "Return"),
            (SpvOp::ReturnValue, OpData::new(0, 0, 0, 0), "ReturnValue"),
            (SpvOp::Unreachable, OpData::new(0, 0, 0, 0), "Unreachable"),
            (
                SpvOp::LifetimeStart,
                OpData::new(0, 0, 0, 0),
                "LifetimeStart",
            ),
            (SpvOp::LifetimeStop, OpData::new(0, 0, 0, 0), "LifetimeStop"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#258"),
            (
                SpvOp::GroupAsyncCopy,
                OpData::new(1, 1, 0, 0),
                "GroupAsyncCopy",
            ),
            (
                SpvOp::GroupWaitEvents,
                OpData::new(0, 0, 0, 0),
                "GroupWaitEvents",
            ),
            (SpvOp::GroupAll, OpData::new(1, 1, 0, 0), "GroupAll"),
            (SpvOp::GroupAny, OpData::new(1, 1, 0, 0), "GroupAny"),
            (
                SpvOp::GroupBroadcast,
                OpData::new(1, 1, 0, 0),
                "GroupBroadcast",
            ),
            (SpvOp::GroupIAdd, OpData::new(1, 1, 0, 0), "GroupIAdd"),
            (SpvOp::GroupFAdd, OpData::new(1, 1, 0, 0), "GroupFAdd"),
            (SpvOp::GroupFMin, OpData::new(1, 1, 0, 0), "GroupFMin"),
            (SpvOp::GroupUMin, OpData::new(1, 1, 0, 0), "GroupUMin"),
            (SpvOp::GroupSMin, OpData::new(1, 1, 0, 0), "GroupSMin"),
            (SpvOp::GroupFMax, OpData::new(1, 1, 0, 0), "GroupFMax"),
            (SpvOp::GroupUMax, OpData::new(1, 1, 0, 0), "GroupUMax"),
            (SpvOp::GroupSMax, OpData::new(1, 1, 0, 0), "GroupSMax"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#272"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#273"),
            (SpvOp::ReadPipe, OpData::new(1, 1, 0, 0), "ReadPipe"),
            (SpvOp::WritePipe, OpData::new(1, 1, 0, 0), "WritePipe"),
            (
                SpvOp::ReservedReadPipe,
                OpData::new(1, 1, 0, 0),
                "ReservedReadPipe",
            ),
            (
                SpvOp::ReservedWritePipe,
                OpData::new(1, 1, 0, 0),
                "ReservedWritePipe",
            ),
            (
                SpvOp::ReserveReadPipePackets,
                OpData::new(1, 1, 0, 0),
                "ReserveReadPipePackets",
            ),
            (
                SpvOp::ReserveWritePipePackets,
                OpData::new(1, 1, 0, 0),
                "ReserveWritePipePackets",
            ),
            (
                SpvOp::CommitReadPipe,
                OpData::new(0, 0, 0, 0),
                "CommitReadPipe",
            ),
            (
                SpvOp::CommitWritePipe,
                OpData::new(0, 0, 0, 0),
                "CommitWritePipe",
            ),
            (
                SpvOp::IsValidReserveId,
                OpData::new(1, 1, 0, 0),
                "IsValidReserveId",
            ),
            (
                SpvOp::GetNumPipePackets,
                OpData::new(1, 1, 0, 0),
                "GetNumPipePackets",
            ),
            (
                SpvOp::GetMaxPipePackets,
                OpData::new(1, 1, 0, 0),
                "GetMaxPipePackets",
            ),
            (
                SpvOp::GroupReserveReadPipePackets,
                OpData::new(1, 1, 0, 0),
                "GroupReserveReadPipePackets",
            ),
            (
                SpvOp::GroupReserveWritePipePackets,
                OpData::new(1, 1, 0, 0),
                "GroupReserveWritePipePackets",
            ),
            (
                SpvOp::GroupCommitReadPipe,
                OpData::new(0, 0, 0, 0),
                "GroupCommitReadPipe",
            ),
            (
                SpvOp::GroupCommitWritePipe,
                OpData::new(0, 0, 0, 0),
                "GroupCommitWritePipe",
            ),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#289"),
            (SpvOp::Invalid, OpData::new(1, 1, 0, 0), "#290"),
            (
                SpvOp::EnqueueMarker,
                OpData::new(1, 1, 0, 0),
                "EnqueueMarker",
            ),
            (
                SpvOp::EnqueueKernel,
                OpData::new(1, 1, 0, 0),
                "EnqueueKernel",
            ),
            (
                SpvOp::GetKernelNDrangeSubGroupCount,
                OpData::new(1, 1, 0, 0),
                "GetKernelNDrangeSubGroupCount",
            ),
            (
                SpvOp::GetKernelNDrangeMaxSubGroupSize,
                OpData::new(1, 1, 0, 0),
                "GetKernelNDrangeMaxSubGroupSize",
            ),
            (
                SpvOp::GetKernelWorkGroupSize,
                OpData::new(1, 1, 0, 0),
                "GetKernelWorkGroupSize",
            ),
            (
                SpvOp::GetKernelPreferredWorkGroupSizeMultiple,
                OpData::new(1, 1, 0, 0),
                "GetKernelPreferredWorkGroupSizeMultiple",
            ),
            (SpvOp::RetainEvent, OpData::new(0, 0, 0, 0), "RetainEvent"),
            (SpvOp::ReleaseEvent, OpData::new(0, 0, 0, 0), "ReleaseEvent"),
            (
                SpvOp::CreateUserEvent,
                OpData::new(1, 1, 0, 0),
                "CreateUserEvent",
            ),
            (SpvOp::IsValidEvent, OpData::new(1, 1, 0, 0), "IsValidEvent"),
            (
                SpvOp::SetUserEventStatus,
                OpData::new(0, 0, 0, 0),
                "SetUserEventStatus",
            ),
            (
                SpvOp::CaptureEventProfilingInfo,
                OpData::new(0, 0, 0, 0),
                "CaptureEventProfilingInfo",
            ),
            (
                SpvOp::GetDefaultQueue,
                OpData::new(1, 1, 0, 0),
                "GetDefaultQueue",
            ),
            (SpvOp::BuildNDRange, OpData::new(1, 1, 0, 0), "BuildNDRange"),
            (
                SpvOp::ImageSparseSampleImplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSparseSampleImplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleExplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSparseSampleExplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleDrefImplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSparseSampleDrefImplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleDrefExplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSparseSampleDrefExplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleProjImplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSparseSampleProjImplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleProjExplicitLod,
                OpData::new(1, 1, 2, 1),
                "ImageSparseSampleProjExplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleProjDrefImplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSparseSampleProjDrefImplicitLod",
            ),
            (
                SpvOp::ImageSparseSampleProjDrefExplicitLod,
                OpData::new(1, 1, 3, 1),
                "ImageSparseSampleProjDrefExplicitLod",
            ),
            (
                SpvOp::ImageSparseFetch,
                OpData::new(1, 1, 2, 1),
                "ImageSparseFetch",
            ),
            (
                SpvOp::ImageSparseGather,
                OpData::new(1, 1, 3, 1),
                "ImageSparseGather",
            ),
            (
                SpvOp::ImageSparseDrefGather,
                OpData::new(1, 1, 3, 1),
                "ImageSparseDrefGather",
            ),
            (
                SpvOp::ImageSparseTexelsResident,
                OpData::new(1, 1, 1, 0),
                "ImageSparseTexelsResident",
            ),
            (SpvOp::NoLine, OpData::new(0, 0, 0, 0), "NoLine"),
            (
                SpvOp::AtomicFlagTestAndSet,
                OpData::new(1, 1, 0, 0),
                "AtomicFlagTestAndSet",
            ),
            (
                SpvOp::AtomicFlagClear,
                OpData::new(0, 0, 0, 0),
                "AtomicFlagClear",
            ),
            (
                SpvOp::ImageSparseRead,
                OpData::new(1, 1, 0, 0),
                "ImageSparseRead",
            ),
            (SpvOp::SizeOf, OpData::new(1, 1, 0, 0), "SizeOf"),
            (
                SpvOp::TypePipeStorage,
                OpData::new(1, 1, 0, 0),
                "TypePipeStorage",
            ),
            (
                SpvOp::ConstantPipeStorage,
                OpData::new(1, 1, 0, 0),
                "ConstantPipeStorage",
            ),
            (
                SpvOp::CreatePipeFromPipeStorage,
                OpData::new(1, 1, 0, 0),
                "CreatePipeFromPipeStorage",
            ),
            (
                SpvOp::GetKernelLocalSizeForSubgroupCount,
                OpData::new(1, 1, 0, 0),
                "GetKernelLocalSizeForSubgroupCount",
            ),
            (
                SpvOp::GetKernelMaxNumSubgroups,
                OpData::new(1, 1, 0, 0),
                "GetKernelMaxNumSubgroups",
            ),
            (
                SpvOp::TypeNamedBarrier,
                OpData::new(1, 1, 0, 0),
                "TypeNamedBarrier",
            ),
            (
                SpvOp::NamedBarrierInitialize,
                OpData::new(1, 1, 0, 1),
                "NamedBarrierInitialize",
            ),
            (
                SpvOp::MemoryNamedBarrier,
                OpData::new(0, 0, 2, 1),
                "MemoryNamedBarrier",
            ),
            (
                SpvOp::ModuleProcessed,
                OpData::new(1, 1, 0, 0),
                "ModuleProcessed",
            ),
        ]
    };
}

const SPV_HEADER_MAGIC: u32 = 0x0723_0203;
const SMOL_HEADER_MAGIC: u32 = 0x534D_4F4C; // "SMOL"

pub fn check_generic_header(words: &[u32], expected_magic: u32) -> bool {
    if words.len() < 5 {
        return false;
    }

    let header_magic = words[0];
    if header_magic != expected_magic {
        return false;
    }

    let header_version = words[1];
    if (header_version < 0x0001_0000 || header_version > 0x0001_0300) {
		return false; // only support 1.0 through 1.3
    }

    true
}

pub fn check_spirv_header(words: &[u32]) -> bool {
    // TODO: if SPIR-V header magic was reversed, that means the file got written
	// in a "big endian" order. Need to byteswap all words then.
    check_generic_header(&words, SPV_HEADER_MAGIC)
}

pub fn check_smol_header(bytes: &[u8]) -> bool {
    let ptr = bytes.as_ptr() as *const _;
    let slice = unsafe { std::slice::from_raw_parts(ptr, bytes.len() >> 2) };
    if !check_generic_header(&slice, SMOL_HEADER_MAGIC) {
        return false;
    }
    if bytes.len() < 24 { // one more word past header to store decoded length
		return false;
    }
    true
}

